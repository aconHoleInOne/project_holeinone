{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\awd63\\\\Downloads\\\\AIhomeTraining_web-master\\\\AIhomeTraining_web-master\\\\Listener\\\\frontend\\\\src\\\\containers\\\\auth\\\\ModifyForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { changeField, initializeForm, modify } from '../../modules/auth';\nimport ModifyAuthForm from '../../components/auth/ModifyAuthForm';\nimport { logout } from '../../modules/user';\n\nconst ModifyForm = ({\n  history\n}) => {\n  _s();\n\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const {\n    form,\n    user\n  } = useSelector(({\n    auth,\n    user\n  }) => ({\n    form: auth.modify,\n    user: user.user\n  })); // 인풋 변경 이벤트 핸들러\n\n  const onChange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    dispatch(changeField({\n      form: 'modify',\n      key: name,\n      value\n    }));\n  }; // 폼 등록 이벤트 핸들러\n\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const {\n      password,\n      passwordConfirm\n    } = form;\n    const username = user.username;\n\n    if ([password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요.');\n      return;\n    } // 비밀번호가 일치하지 않는다면\n\n\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      dispatch(changeField({\n        form: 'modify',\n        key: 'password',\n        value: ''\n      }));\n      dispatch(changeField({\n        form: 'modify',\n        key: 'passwordConfirm',\n        value: ''\n      }));\n      return;\n    }\n\n    dispatch(modify({\n      username,\n      password\n    }));\n    dispatch(logout());\n  }; // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\n\n\n  useEffect(() => {\n    dispatch(initializeForm('modify'));\n  }, [dispatch]);\n  useEffect(() => {\n    if (!user) {\n      console.log('변경 성공');\n      alert('비밀번호가 변경되었습니다. 다시 로그인해주세요.');\n      history.push('/');\n    }\n  }, [history, user]);\n  return /*#__PURE__*/_jsxDEV(ModifyAuthForm, {\n    type: \"modify\",\n    form: form,\n    onChange: onChange,\n    onSubmit: onSubmit,\n    error: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this);\n};\n\n_s(ModifyForm, \"yhnJ5uW9orIovxUZWQILiIW10G0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ModifyForm;\nexport default _c2 = withRouter(ModifyForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ModifyForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/awd63/Downloads/AIhomeTraining_web-master/AIhomeTraining_web-master/Listener/frontend/src/containers/auth/ModifyForm.js"],"names":["React","useEffect","useState","useSelector","useDispatch","withRouter","changeField","initializeForm","modify","ModifyAuthForm","logout","ModifyForm","history","error","setError","dispatch","form","user","auth","onChange","e","value","name","target","key","onSubmit","preventDefault","password","passwordConfirm","username","includes","console","log","alert","push"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAAUC,UAAV,QAA4B,kBAA5B;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,MAAtC,QAAoD,oBAApD;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,SAASC,MAAT,QAAuB,oBAAvB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAe;AAAA;;AAC9B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAMa,QAAQ,GAAGX,WAAW,EAA5B;AACA,QAAM;AAAEY,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAiBd,WAAW,CAAC,CAAC;AAAEe,IAAAA,IAAF;AAAQD,IAAAA;AAAR,GAAD,MAAqB;AACtDD,IAAAA,IAAI,EAAEE,IAAI,CAACV,MAD2C;AAEtDS,IAAAA,IAAI,EAAEA,IAAI,CAACA;AAF2C,GAArB,CAAD,CAAlC,CAH8B,CAO9B;;AACA,QAAME,QAAQ,GAAGC,CAAC,IAAI;AACpB,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBF,CAAC,CAACG,MAA1B;AACAR,IAAAA,QAAQ,CACNT,WAAW,CAAC;AACVU,MAAAA,IAAI,EAAE,QADI;AAEVQ,MAAAA,GAAG,EAAEF,IAFK;AAGVD,MAAAA;AAHU,KAAD,CADL,CAAR;AAOD,GATD,CAR8B,CAmB9B;;;AACA,QAAMI,QAAQ,GAAGL,CAAC,IAAI;AACpBA,IAAAA,CAAC,CAACM,cAAF;AACA,UAAM;AAACC,MAAAA,QAAD;AAAWC,MAAAA;AAAX,QAA8BZ,IAApC;AACA,UAAMa,QAAQ,GAAGZ,IAAI,CAACY,QAAtB;;AACA,QAAG,CAACF,QAAD,EAAWC,eAAX,EAA4BE,QAA5B,CAAqC,EAArC,CAAH,EAA6C;AAC3ChB,MAAAA,QAAQ,CAAC,gBAAD,CAAR;AACA;AACD,KAPmB,CAQlB;;;AACA,QAAIa,QAAQ,KAAKC,eAAjB,EAAkC;AAClCd,MAAAA,QAAQ,CAAC,kBAAD,CAAR;AACAC,MAAAA,QAAQ,CAACT,WAAW,CAAC;AAAEU,QAAAA,IAAI,EAAE,QAAR;AAAkBQ,QAAAA,GAAG,EAAE,UAAvB;AAAmCH,QAAAA,KAAK,EAAE;AAA1C,OAAD,CAAZ,CAAR;AACAN,MAAAA,QAAQ,CACNT,WAAW,CAAC;AAAEU,QAAAA,IAAI,EAAE,QAAR;AAAkBQ,QAAAA,GAAG,EAAE,iBAAvB;AAA0CH,QAAAA,KAAK,EAAE;AAAjD,OAAD,CADL,CAAR;AAGA;AACD;;AACDN,IAAAA,QAAQ,CAACP,MAAM,CAAC;AAAEqB,MAAAA,QAAF;AAAYF,MAAAA;AAAZ,KAAD,CAAP,CAAR;AACAZ,IAAAA,QAAQ,CAACL,MAAM,EAAP,CAAR;AACD,GAnBD,CApB8B,CAyC9B;;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,QAAQ,CAACR,cAAc,CAAC,QAAD,CAAf,CAAR;AACD,GAFQ,EAEN,CAACQ,QAAD,CAFM,CAAT;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACgB,IAAL,EAAW;AACTc,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAC,MAAAA,KAAK,CAAC,4BAAD,CAAL;AACArB,MAAAA,OAAO,CAACsB,IAAR,CAAa,GAAb;AACD;AACA,GANM,EAMJ,CAACtB,OAAD,EAAUK,IAAV,CANI,CAAT;AAQA,sBACE,QAAC,cAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,IAAI,EAAED,IAFR;AAGE,IAAA,QAAQ,EAAEG,QAHZ;AAIE,IAAA,QAAQ,EAAEM,QAJZ;AAKE,IAAA,KAAK,EAAEZ;AALT;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA/DH;;GAAMF,U;UAEeP,W,EACMD,W;;;KAHrBQ,U;AAiEJ,qBAAeN,UAAU,CAACM,UAAD,CAAzB","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {  withRouter } from 'react-router-dom';\nimport { changeField, initializeForm, modify } from '../../modules/auth';\nimport ModifyAuthForm from '../../components/auth/ModifyAuthForm';\nimport { logout } from '../../modules/user';\n\nconst ModifyForm = ({history}) => {\n    const [error, setError] = useState(null);\n    const dispatch = useDispatch();\n    const { form, user } = useSelector(({ auth, user }) => ({\n      form: auth.modify,\n      user: user.user\n    }));\n    // 인풋 변경 이벤트 핸들러\n    const onChange = e => {\n      const { value, name } = e.target;\n      dispatch(\n        changeField({\n          form: 'modify',\n          key: name,\n          value,\n        }),\n      );\n    };\n\n    // 폼 등록 이벤트 핸들러\n    const onSubmit = e => {\n      e.preventDefault();\n      const {password, passwordConfirm} = form;\n      const username = user.username;\n      if([password, passwordConfirm].includes('')) {\n        setError('빈 칸을 모두 입력하세요.');\n        return;\n      }\n        // 비밀번호가 일치하지 않는다면\n        if (password !== passwordConfirm) {\n        setError('비밀번호가 일치하지 않습니다.');\n        dispatch(changeField({ form: 'modify', key: 'password', value: '' }));\n        dispatch(\n          changeField({ form: 'modify', key: 'passwordConfirm', value: '' }),\n        );\n        return;\n      }\n      dispatch(modify({ username, password }));\n      dispatch(logout());\n    };\n\n    // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\n    useEffect(() => {\n      dispatch(initializeForm('modify'));\n    }, [dispatch]);\n  \n    useEffect(() => {\n      if (!user) {\n        console.log('변경 성공');\n        alert('비밀번호가 변경되었습니다. 다시 로그인해주세요.');\n        history.push('/');\n      }\n      }, [history, user]);\n\n    return (\n      <ModifyAuthForm\n        type=\"modify\"\n        form={form}\n        onChange={onChange}\n        onSubmit={onSubmit}\n        error={error}\n      />\n    );\n  };\n\n  export default withRouter(ModifyForm);"]},"metadata":{},"sourceType":"module"}