{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst [READ_POST, READ_POST_SUCCESS, READ_POST_FAILURE] = createRequestActionTypes('post/READ_POST');\nconst [WRITE_COMMENT, WRITE_COMMENT_SUCCESS, WRITE_COMMENT_FAILURE] = createRequestActionTypes('comment/WRITE_COMMENT');\nconst UNLOAD_POST = 'post/UNLOAD_POST'; // 포스트 페이지에서 벗어날 때 데이터 비우기\n\nexport const readPost = createAction(READ_POST, id => id);\nexport const unloadPost = createAction(UNLOAD_POST);\nexport const writeComment = createAction(WRITE_COMMENT, ({\n  text,\n  username,\n  id\n}) => ({\n  text,\n  username,\n  id\n}));\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\nconst writeCommentSaga = createRequestSaga(WRITE_COMMENT, postsAPI.comment);\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n  yield takeLatest(WRITE_COMMENT, writeCommentSaga);\n}\nconst initialState = {\n  post: null,\n  error: null\n};\nconst post = handleActions({\n  [READ_POST_SUCCESS]: (state, {\n    payload: post\n  }) => ({ ...state,\n    post\n  }),\n  [READ_POST_FAILURE]: (state, {\n    payload: error\n  }) => ({ ...state,\n    error\n  }),\n  [WRITE_COMMENT]: state => ({ ...state,\n    error: null\n  }),\n  // 포스트 작성 성공\n  [WRITE_COMMENT_SUCCESS]: (state, {\n    payload: post\n  }) => ({ ...state,\n    post\n  }),\n  // 댓글 작성 실패\n  [WRITE_COMMENT_FAILURE]: (state, {\n    payload: error\n  }) => ({ ...state,\n    error\n  }),\n  [UNLOAD_POST]: () => initialState\n}, initialState);\nexport default post;","map":{"version":3,"sources":["C:/Users/awd63/Downloads/AIhomeTraining_web-master/AIhomeTraining_web-master/Listener/frontend/src/modules/post.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","WRITE_COMMENT","WRITE_COMMENT_SUCCESS","WRITE_COMMENT_FAILURE","UNLOAD_POST","readPost","id","unloadPost","writeComment","text","username","readPostSaga","writeCommentSaga","comment","postSaga","initialState","post","error","state","payload"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,MAAM,CACJC,SADI,EAEJC,iBAFI,EAGJC,iBAHI,IAIFL,wBAAwB,CAAC,gBAAD,CAJ5B;AAMA,MAAM,CACJM,aADI,EAEJC,qBAFI,EAGJC,qBAHI,IAIFR,wBAAwB,CAAC,uBAAD,CAJ5B;AAMA,MAAMS,WAAW,GAAG,kBAApB,C,CAAwC;;AAExC,OAAO,MAAMC,QAAQ,GAAGb,YAAY,CAACM,SAAD,EAAYQ,EAAE,IAAIA,EAAlB,CAA7B;AACP,OAAO,MAAMC,UAAU,GAAGf,YAAY,CAACY,WAAD,CAA/B;AACP,OAAO,MAAMI,YAAY,GAAGhB,YAAY,CAACS,aAAD,EAAgB,CAAC;AAAEQ,EAAAA,IAAF;AAAQC,EAAAA,QAAR;AAAkBJ,EAAAA;AAAlB,CAAD,MAA6B;AACnFG,EAAAA,IADmF;AAEnFC,EAAAA,QAFmF;AAGnFJ,EAAAA;AAHmF,CAA7B,CAAhB,CAAjC;AAKP,MAAMK,YAAY,GAAGjB,iBAAiB,CAACI,SAAD,EAAYF,QAAQ,CAACS,QAArB,CAAtC;AACA,MAAMO,gBAAgB,GAAGlB,iBAAiB,CAACO,aAAD,EAAgBL,QAAQ,CAACiB,OAAzB,CAA1C;AAEA,OAAO,UAAUC,QAAV,GAAqB;AAC1B,QAAMjB,UAAU,CAACC,SAAD,EAAYa,YAAZ,CAAhB;AACA,QAAMd,UAAU,CAACI,aAAD,EAAgBW,gBAAhB,CAAhB;AACD;AAED,MAAMG,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;AAKA,MAAMD,IAAI,GAAGvB,aAAa,CACxB;AACE,GAACM,iBAAD,GAAqB,CAACmB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,MAA+B,EAClD,GAAGE,KAD+C;AAElDF,IAAAA;AAFkD,GAA/B,CADvB;AAKE,GAAChB,iBAAD,GAAqB,CAACkB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEF;AAAX,GAAR,MAAgC,EACnD,GAAGC,KADgD;AAEnDD,IAAAA;AAFmD,GAAhC,CALvB;AASE,GAAChB,aAAD,GAAiBiB,KAAK,KAAK,EACzB,GAAGA,KADsB;AAEzBD,IAAAA,KAAK,EAAE;AAFkB,GAAL,CATxB;AAaE;AACA,GAACf,qBAAD,GAAyB,CAACgB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,MAA+B,EACtD,GAAGE,KADmD;AAEtDF,IAAAA;AAFsD,GAA/B,CAd3B;AAkBE;AACA,GAACb,qBAAD,GAAyB,CAACe,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEF;AAAX,GAAR,MAAgC,EACvD,GAAGC,KADoD;AAEvDD,IAAAA;AAFuD,GAAhC,CAnB3B;AAuBE,GAACb,WAAD,GAAe,MAAMW;AAvBvB,CADwB,EA0BxBA,YA1BwB,CAA1B;AA6BA,eAAeC,IAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [\n  READ_POST,\n  READ_POST_SUCCESS,\n  READ_POST_FAILURE,\n] = createRequestActionTypes('post/READ_POST');\n\nconst [\n  WRITE_COMMENT,\n  WRITE_COMMENT_SUCCESS,\n  WRITE_COMMENT_FAILURE,\n] = createRequestActionTypes('comment/WRITE_COMMENT');\n\nconst UNLOAD_POST = 'post/UNLOAD_POST'; // 포스트 페이지에서 벗어날 때 데이터 비우기\n\nexport const readPost = createAction(READ_POST, id => id);\nexport const unloadPost = createAction(UNLOAD_POST);\nexport const writeComment = createAction(WRITE_COMMENT, ({ text, username, id }) => ({\n  text,\n  username,\n  id,\n}));\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\nconst writeCommentSaga = createRequestSaga(WRITE_COMMENT, postsAPI.comment);\n\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n  yield takeLatest(WRITE_COMMENT, writeCommentSaga);\n}\n\nconst initialState = {\n  post: null,\n  error: null,\n};\n\nconst post = handleActions(\n  {\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [WRITE_COMMENT]: state => ({\n      ...state,\n      error: null,\n    }),\n    // 포스트 작성 성공\n    [WRITE_COMMENT_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    // 댓글 작성 실패\n    [WRITE_COMMENT_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),  \n    [UNLOAD_POST]: () => initialState,\n  },\n  initialState,\n);\n\nexport default post;"]},"metadata":{},"sourceType":"module"}