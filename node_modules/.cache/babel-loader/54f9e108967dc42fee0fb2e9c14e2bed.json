{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as authAPI from '../lib/api/auth';\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes('auth/REGISTER');\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes('auth/LOGIN');\nconst [MODIFY, MODIFY_SUCCESS, MODIFY_FAILURE] = createRequestActionTypes('auth/MODIFY');\nconst [UPDATETOTALTIME, UPDATETOTALTIME_SUCCESS, UPDATETOTALTIME_FAILURE] = createRequestActionTypes('auth/UPDATETOTALTIME');\nexport const changeField = createAction(CHANGE_FIELD, ({\n  form,\n  key,\n  value\n}) => ({\n  form,\n  // register , login\n  key,\n  // username, password, passwordConfirm\n  value // 실제 바꾸려는값\n\n}));\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); // register / login\n\nexport const register = createAction(REGISTER, ({\n  username,\n  password\n}) => ({\n  username,\n  password\n}));\nexport const login = createAction(LOGIN, ({\n  username,\n  password\n}) => ({\n  username,\n  password\n}));\nexport const modify = createAction(MODIFY, ({\n  username,\n  password\n}) => ({\n  username,\n  password\n}));\nexport const updateTotalTime = createAction(UPDATETOTALTIME, ({\n  username,\n  totalTime\n}) => ({\n  username,\n  totalTime\n}));\nexport const updateLevel = createAction(UPDATETOTALTIME, ({\n  username,\n  totalTime\n}) => ({\n  username,\n  totalTime\n}));\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nconst modifySaga = createRequestSaga(MODIFY, authAPI.modify);\nconst updateTotalTimeSaga = createRequestSaga(UPDATETOTALTIME, authAPI.updateTotalTime);\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n  yield takeLatest(MODIFY, modifySaga);\n  yield takeLatest(UPDATETOTALTIME, updateTotalTimeSaga);\n}\n;\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: ''\n  },\n  login: {\n    username: '',\n    password: ''\n  },\n  modify: {\n    password: '',\n    passwordConfirm: ''\n  },\n  auth: null,\n  authError: null\n};\nconst auth = handleActions({\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      form,\n      key,\n      value\n    }\n  }) => produce(state, draft => {\n    draft[form][key] = value; // 예: state.register.username을 바꾼다\n  }),\n  [INITIALIZE_FORM]: (state, {\n    payload: form\n  }) => ({ ...state,\n    [form]: initialState[form],\n    authError: null // 폼 전환 시 회원 인증 에러 초기화\n\n  }),\n  // 회원가입 성공\n  [REGISTER_SUCCESS]: (state, {\n    payload: auth\n  }) => ({ ...state,\n    authError: null,\n    auth\n  }),\n  // 회원가입 실패\n  [REGISTER_FAILURE]: (state, {\n    payload: error\n  }) => ({ ...state,\n    authError: error\n  }),\n  // 로그인 성공\n  [LOGIN_SUCCESS]: (state, {\n    payload: auth\n  }) => ({ ...state,\n    authError: null,\n    auth\n  }),\n  // 로그인 실패\n  [LOGIN_FAILURE]: (state, {\n    payload: error\n  }) => ({ ...state,\n    authError: error\n  }),\n  //비밀번호 변경 성공\n  [MODIFY_SUCCESS]: state => ({ ...state,\n    authError: null,\n    auth: null\n  }),\n  // 비밀번호변경 실패\n  [MODIFY_FAILURE]: (state, {\n    payload: error\n  }) => ({ ...state,\n    authError: error\n  }),\n  [UPDATETOTALTIME_SUCCESS]: (state, {\n    payload: auth\n  }) => ({ ...state,\n    authError: null,\n    auth\n  }),\n  [UPDATETOTALTIME_FAILURE]: (state, {\n    payload: error\n  }) => ({ ...state,\n    authError: error\n  })\n}, initialState);\nexport default auth;","map":{"version":3,"sources":["C:/Users/awd63/Downloads/AIhomeTraining_web-master/AIhomeTraining_web-master/Listener/frontend/src/modules/auth.js"],"names":["createAction","handleActions","produce","takeLatest","createRequestSaga","createRequestActionTypes","authAPI","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","MODIFY","MODIFY_SUCCESS","MODIFY_FAILURE","UPDATETOTALTIME","UPDATETOTALTIME_SUCCESS","UPDATETOTALTIME_FAILURE","changeField","form","key","value","initializeForm","register","username","password","login","modify","updateTotalTime","totalTime","updateLevel","registerSaga","loginSaga","modifySaga","updateTotalTimeSaga","authSaga","initialState","passwordConfirm","auth","authError","state","payload","draft","error"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAOC,iBAAP,IACIC,wBADJ,QAES,0BAFT;AAGA,OAAO,KAAKC,OAAZ,MAAyB,iBAAzB;AAEA,MAAMC,YAAY,GAAG,mBAArB;AACA,MAAMC,eAAe,GAAG,sBAAxB;AAEA,MAAM,CAACC,QAAD,EAAWC,gBAAX,EAA6BC,gBAA7B,IAAiDN,wBAAwB,CAC3E,eAD2E,CAA/E;AAIA,MAAM,CAACO,KAAD,EAAQC,aAAR,EAAuBC,aAAvB,IAAwCT,wBAAwB,CAClE,YADkE,CAAtE;AAIA,MAAM,CAACU,MAAD,EAASC,cAAT,EAAyBC,cAAzB,IAA2CZ,wBAAwB,CACrE,aADqE,CAAzE;AAIE,MAAM,CAACa,eAAD,EAAkBC,uBAAlB,EAA2CC,uBAA3C,IAAsEf,wBAAwB,CAClG,sBADkG,CAApG;AAIF,OAAO,MAAMgB,WAAW,GAAGrB,YAAY,CACnCO,YADmC,EAEnC,CAAC;AAAEe,EAAAA,IAAF;AAAQC,EAAAA,GAAR;AAAaC,EAAAA;AAAb,CAAD,MAA2B;AACzBF,EAAAA,IADyB;AACnB;AACNC,EAAAA,GAFyB;AAEpB;AACLC,EAAAA,KAHyB,CAGlB;;AAHkB,CAA3B,CAFmC,CAAhC;AASL,OAAO,MAAMC,cAAc,GAAGzB,YAAY,CAACQ,eAAD,EAAkBc,IAAI,IAAIA,IAA1B,CAAnC,C,CAAoE;;AAC3E,OAAO,MAAMI,QAAQ,GAAG1B,YAAY,CAACS,QAAD,EAAW,CAAC;AAAEkB,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,MAA6B;AAC1ED,EAAAA,QAD0E;AAE1EC,EAAAA;AAF0E,CAA7B,CAAX,CAA7B;AAIP,OAAO,MAAMC,KAAK,GAAG7B,YAAY,CAACY,KAAD,EAAQ,CAAC;AAAEe,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,MAA6B;AACpED,EAAAA,QADoE;AAEpEC,EAAAA;AAFoE,CAA7B,CAAR,CAA1B;AAIP,OAAO,MAAME,MAAM,GAAG9B,YAAY,CAACe,MAAD,EAAS,CAAC;AAAEY,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,MAA6B;AACtED,EAAAA,QADsE;AAEtEC,EAAAA;AAFsE,CAA7B,CAAT,CAA3B;AAIP,OAAO,MAAMG,eAAe,GAAG/B,YAAY,CAACkB,eAAD,EAAkB,CAAC;AAAES,EAAAA,QAAF;AAAYK,EAAAA;AAAZ,CAAD,MAA8B;AACzFL,EAAAA,QADyF;AAEzFK,EAAAA;AAFyF,CAA9B,CAAlB,CAApC;AAIP,OAAO,MAAMC,WAAW,GAAGjC,YAAY,CAACkB,eAAD,EAAkB,CAAC;AAAES,EAAAA,QAAF;AAAYK,EAAAA;AAAZ,CAAD,MAA8B;AACrFL,EAAAA,QADqF;AAErFK,EAAAA;AAFqF,CAA9B,CAAlB,CAAhC;AAKP,MAAME,YAAY,GAAG9B,iBAAiB,CAACK,QAAD,EAAWH,OAAO,CAACoB,QAAnB,CAAtC;AACA,MAAMS,SAAS,GAAG/B,iBAAiB,CAACQ,KAAD,EAAQN,OAAO,CAACuB,KAAhB,CAAnC;AACA,MAAMO,UAAU,GAAGhC,iBAAiB,CAACW,MAAD,EAAST,OAAO,CAACwB,MAAjB,CAApC;AACA,MAAMO,mBAAmB,GAAGjC,iBAAiB,CAACc,eAAD,EAAkBZ,OAAO,CAACyB,eAA1B,CAA7C;AAEA,OAAO,UAAUO,QAAV,GAAqB;AAC1B,QAAMnC,UAAU,CAACM,QAAD,EAAWyB,YAAX,CAAhB;AACA,QAAM/B,UAAU,CAACS,KAAD,EAAQuB,SAAR,CAAhB;AACA,QAAMhC,UAAU,CAACY,MAAD,EAASqB,UAAT,CAAhB;AACA,QAAMjC,UAAU,CAACe,eAAD,EAAkBmB,mBAAlB,CAAhB;AAA0D;AAAA;AAE5D,MAAME,YAAY,GAAG;AACnBb,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,EADF;AAERC,IAAAA,QAAQ,EAAE,EAFF;AAGRY,IAAAA,eAAe,EAAE;AAHT,GADS;AAMnBX,EAAAA,KAAK,EAAE;AACLF,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,QAAQ,EAAE;AAFL,GANY;AAUnBE,EAAAA,MAAM,EAAE;AACNF,IAAAA,QAAQ,EAAE,EADJ;AAENY,IAAAA,eAAe,EAAE;AAFX,GAVW;AAcnBC,EAAAA,IAAI,EAAE,IAda;AAenBC,EAAAA,SAAS,EAAE;AAfQ,CAArB;AAkBA,MAAMD,IAAI,GAAGxC,aAAa,CACxB;AACE,GAACM,YAAD,GAAgB,CAACoC,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAE;AAAEtB,MAAAA,IAAF;AAAQC,MAAAA,GAAR;AAAaC,MAAAA;AAAb;AAAX,GAAR,KACdtB,OAAO,CAACyC,KAAD,EAAQE,KAAK,IAAI;AACtBA,IAAAA,KAAK,CAACvB,IAAD,CAAL,CAAYC,GAAZ,IAAmBC,KAAnB,CADsB,CACI;AAC3B,GAFM,CAFX;AAKE,GAAChB,eAAD,GAAmB,CAACmC,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEtB;AAAX,GAAR,MAA+B,EAChD,GAAGqB,KAD6C;AAEhD,KAACrB,IAAD,GAAQiB,YAAY,CAACjB,IAAD,CAF4B;AAGhDoB,IAAAA,SAAS,EAAE,IAHqC,CAGhC;;AAHgC,GAA/B,CALrB;AAUE;AACA,GAAChC,gBAAD,GAAoB,CAACiC,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,MAA+B,EACjD,GAAGE,KAD8C;AAEjDD,IAAAA,SAAS,EAAE,IAFsC;AAGjDD,IAAAA;AAHiD,GAA/B,CAXtB;AAgBE;AACA,GAAC9B,gBAAD,GAAoB,CAACgC,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEE;AAAX,GAAR,MAAgC,EAClD,GAAGH,KAD+C;AAElDD,IAAAA,SAAS,EAAEI;AAFuC,GAAhC,CAjBtB;AAqBE;AACA,GAACjC,aAAD,GAAiB,CAAC8B,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,MAA+B,EAC9C,GAAGE,KAD2C;AAE9CD,IAAAA,SAAS,EAAE,IAFmC;AAG9CD,IAAAA;AAH8C,GAA/B,CAtBnB;AA2BE;AACA,GAAC3B,aAAD,GAAiB,CAAC6B,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEE;AAAX,GAAR,MAAgC,EAC/C,GAAGH,KAD4C;AAE/CD,IAAAA,SAAS,EAAEI;AAFoC,GAAhC,CA5BnB;AAgCE;AACA,GAAC9B,cAAD,GAAmB2B,KAAD,KAAY,EAC5B,GAAGA,KADyB;AAE5BD,IAAAA,SAAS,EAAE,IAFiB;AAG5BD,IAAAA,IAAI,EAAG;AAHqB,GAAZ,CAjCpB;AAsCE;AACA,GAACxB,cAAD,GAAkB,CAAC0B,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEE;AAAX,GAAR,MAAgC,EAChD,GAAGH,KAD6C;AAEhDD,IAAAA,SAAS,EAAEI;AAFqC,GAAhC,CAvCpB;AA2CE,GAAC3B,uBAAD,GAA2B,CAACwB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,MAA+B,EACxD,GAAGE,KADqD;AAExDD,IAAAA,SAAS,EAAE,IAF6C;AAGxDD,IAAAA;AAHwD,GAA/B,CA3C7B;AAgDE,GAACrB,uBAAD,GAA2B,CAACuB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEE;AAAX,GAAR,MAAgC,EACzD,GAAGH,KADsD;AAEzDD,IAAAA,SAAS,EAAEI;AAF8C,GAAhC;AAhD7B,CADwB,EAsDxBP,YAtDwB,CAA1B;AAyDF,eAAeE,IAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, {\n    createRequestActionTypes\n  } from '../lib/createRequestSaga';\nimport * as authAPI from '../lib/api/auth';\n\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\n\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\n    'auth/REGISTER'\n  );\n\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\n    'auth/LOGIN'\n  );\n\nconst [MODIFY, MODIFY_SUCCESS, MODIFY_FAILURE] = createRequestActionTypes(\n    'auth/MODIFY'\n  );\n\n  const [UPDATETOTALTIME, UPDATETOTALTIME_SUCCESS, UPDATETOTALTIME_FAILURE] = createRequestActionTypes(\n    'auth/UPDATETOTALTIME'\n  );\n\nexport const changeField = createAction(\n    CHANGE_FIELD,\n    ({ form, key, value }) => ({\n      form, // register , login\n      key, // username, password, passwordConfirm\n      value, // 실제 바꾸려는값\n    })\n  );\n\n  export const initializeForm = createAction(INITIALIZE_FORM, form => form); // register / login\n  export const register = createAction(REGISTER, ({ username, password }) => ({\n    username,\n    password\n  }));\n  export const login = createAction(LOGIN, ({ username, password }) => ({\n    username,\n    password\n  }));\n  export const modify = createAction(MODIFY, ({ username, password }) => ({\n    username,\n    password\n  }));\n  export const updateTotalTime = createAction(UPDATETOTALTIME, ({ username, totalTime }) => ({\n    username,\n    totalTime\n  }));\n  export const updateLevel = createAction(UPDATETOTALTIME, ({ username, totalTime }) => ({\n    username,\n    totalTime\n  }));\n  \n  const registerSaga = createRequestSaga(REGISTER, authAPI.register);\n  const loginSaga = createRequestSaga(LOGIN, authAPI.login);\n  const modifySaga = createRequestSaga(MODIFY, authAPI.modify);\n  const updateTotalTimeSaga = createRequestSaga(UPDATETOTALTIME, authAPI.updateTotalTime);\n\n  export function* authSaga() {\n    yield takeLatest(REGISTER, registerSaga);\n    yield takeLatest(LOGIN, loginSaga);\n    yield takeLatest(MODIFY, modifySaga);\n    yield takeLatest(UPDATETOTALTIME, updateTotalTimeSaga);  };\n\n  const initialState = {\n    register: {\n      username: '',\n      password: '',\n      passwordConfirm: ''\n    },\n    login: {\n      username: '',\n      password: ''\n    },\n    modify: {\n      password: '',\n      passwordConfirm: ''\n    },\n    auth: null,\n    authError: null\n  };\n\n  const auth = handleActions(\n    {\n      [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\n        produce(state, draft => {\n          draft[form][key] = value; // 예: state.register.username을 바꾼다\n        }),\n      [INITIALIZE_FORM]: (state, { payload: form }) => ({\n        ...state,\n        [form]: initialState[form],\n        authError: null // 폼 전환 시 회원 인증 에러 초기화\n      }),\n      // 회원가입 성공\n      [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\n        ...state,\n        authError: null,\n        auth\n      }),\n      // 회원가입 실패\n      [REGISTER_FAILURE]: (state, { payload: error }) => ({\n        ...state,\n        authError: error\n      }),\n      // 로그인 성공\n      [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\n        ...state,\n        authError: null,\n        auth\n      }),\n      // 로그인 실패\n      [LOGIN_FAILURE]: (state, { payload: error }) => ({\n        ...state,\n        authError: error\n      }),\n      //비밀번호 변경 성공\n      [MODIFY_SUCCESS]: (state) => ({\n        ...state,\n        authError: null,\n        auth : null\n      }),\n      // 비밀번호변경 실패\n      [MODIFY_FAILURE]: (state, { payload: error }) => ({\n        ...state,\n        authError: error\n      }),\n      [UPDATETOTALTIME_SUCCESS]: (state, { payload: auth }) => ({\n        ...state,\n        authError: null,\n        auth\n      }),\n      [UPDATETOTALTIME_FAILURE]: (state, { payload: error }) => ({\n        ...state,\n        authError: error\n      })\n    },\n    initialState\n  );\n\nexport default auth;"]},"metadata":{},"sourceType":"module"}