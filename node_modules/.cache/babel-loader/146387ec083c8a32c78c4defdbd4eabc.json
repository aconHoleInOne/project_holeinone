{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\nimport * as postsAPI from \"../lib/api/posts\";\nimport { takeLatest } from \"redux-saga/effects\";\nconst [LIST_POSTS, LIST_POSTS_SUCCESS, LIST_POSTS_FAILURE] = createRequestActionTypes(\"posts/LIST_POSTS\");\nconst [SEARCH_POSTS, SEARCH_POSTS_SUCCESS, SEARCH_POSTS_FAILURE] = createRequestActionTypes(\"get/SEARCH_POSTS\");\nexport const listPosts = createAction(LIST_POSTS, ({\n  username,\n  page\n}) => ({\n  username,\n  page\n}));\nexport const searchPosts = createAction(SEARCH_POSTS, ({\n  page,\n  option,\n  content\n}) => ({\n  page,\n  option,\n  content\n}));\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\nconst searchPostsSaga = createRequestSaga(SEARCH_POSTS, postsAPI.searchPosts);\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n  yield takeLatest(SEARCH_POSTS, searchPostsSaga);\n}\nconst initialState = {\n  posts: null,\n  error: null,\n  lastPage: 1\n};\nconst posts = handleActions({\n  [LIST_POSTS_SUCCESS]: (state, {\n    payload: posts,\n    meta: response\n  }) => ({ ...state,\n    posts,\n    lastPage: parseInt(response.headers[\"last-page\"], 10) // 문자열을 숫자로 변환\n\n  }),\n  [LIST_POSTS_FAILURE]: (state, {\n    payload: error\n  }) => ({ ...state,\n    error\n  }),\n  [SEARCH_POSTS_SUCCESS]: (state, {\n    payload: posts,\n    meta: response\n  }) => ({ ...state,\n    posts,\n    lastPage: parseInt(response.headers[\"last-page\"], 10) // 문자열을 숫자로 변환\n\n  }),\n  [SEARCH_POSTS_FAILURE]: (state, {\n    payload: error\n  }) => ({ ...state,\n    error\n  })\n}, initialState);\nexport default posts;","map":{"version":3,"sources":["C:/Users/awd63/Desktop/project/project_holeinone/src/modules/posts.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","SEARCH_POSTS","SEARCH_POSTS_SUCCESS","SEARCH_POSTS_FAILURE","listPosts","username","page","searchPosts","option","content","listPostsSaga","searchPostsSaga","postsSaga","initialState","posts","error","lastPage","state","payload","meta","response","parseInt","headers"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,kBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,MAAM,CAACC,UAAD,EAAaC,kBAAb,EAAiCC,kBAAjC,IACJL,wBAAwB,CAAC,kBAAD,CAD1B;AAEA,MAAM,CAACM,YAAD,EAAeC,oBAAf,EAAqCC,oBAArC,IACJR,wBAAwB,CAAC,kBAAD,CAD1B;AAGA,OAAO,MAAMS,SAAS,GAAGZ,YAAY,CAACM,UAAD,EAAa,CAAC;AAAEO,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,MAAyB;AACzED,EAAAA,QADyE;AAEzEC,EAAAA;AAFyE,CAAzB,CAAb,CAA9B;AAKP,OAAO,MAAMC,WAAW,GAAGf,YAAY,CACrCS,YADqC,EAErC,CAAC;AAAEK,EAAAA,IAAF;AAAQE,EAAAA,MAAR;AAAgBC,EAAAA;AAAhB,CAAD,MAAgC;AAAEH,EAAAA,IAAF;AAAQE,EAAAA,MAAR;AAAgBC,EAAAA;AAAhB,CAAhC,CAFqC,CAAhC;AAKP,MAAMC,aAAa,GAAGhB,iBAAiB,CAACI,UAAD,EAAaF,QAAQ,CAACQ,SAAtB,CAAvC;AACA,MAAMO,eAAe,GAAGjB,iBAAiB,CAACO,YAAD,EAAeL,QAAQ,CAACW,WAAxB,CAAzC;AAEA,OAAO,UAAUK,SAAV,GAAsB;AAC3B,QAAMf,UAAU,CAACC,UAAD,EAAaY,aAAb,CAAhB;AACA,QAAMb,UAAU,CAACI,YAAD,EAAeU,eAAf,CAAhB;AACD;AAED,MAAME,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,IADY;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,QAAQ,EAAE;AAHS,CAArB;AAMA,MAAMF,KAAK,GAAGrB,aAAa,CACzB;AACE,GAACM,kBAAD,GAAsB,CAACkB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEJ,KAAX;AAAkBK,IAAAA,IAAI,EAAEC;AAAxB,GAAR,MAAgD,EACpE,GAAGH,KADiE;AAEpEH,IAAAA,KAFoE;AAGpEE,IAAAA,QAAQ,EAAEK,QAAQ,CAACD,QAAQ,CAACE,OAAT,CAAiB,WAAjB,CAAD,EAAgC,EAAhC,CAHkD,CAGb;;AAHa,GAAhD,CADxB;AAME,GAACtB,kBAAD,GAAsB,CAACiB,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,MAAgC,EACpD,GAAGE,KADiD;AAEpDF,IAAAA;AAFoD,GAAhC,CANxB;AAUE,GAACb,oBAAD,GAAwB,CAACe,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEJ,KAAX;AAAkBK,IAAAA,IAAI,EAAEC;AAAxB,GAAR,MAAgD,EACtE,GAAGH,KADmE;AAEtEH,IAAAA,KAFsE;AAGtEE,IAAAA,QAAQ,EAAEK,QAAQ,CAACD,QAAQ,CAACE,OAAT,CAAiB,WAAjB,CAAD,EAAgC,EAAhC,CAHoD,CAGf;;AAHe,GAAhD,CAV1B;AAeE,GAACnB,oBAAD,GAAwB,CAACc,KAAD,EAAQ;AAAEC,IAAAA,OAAO,EAAEH;AAAX,GAAR,MAAgC,EACtD,GAAGE,KADmD;AAEtDF,IAAAA;AAFsD,GAAhC;AAf1B,CADyB,EAqBzBF,YArByB,CAA3B;AAwBA,eAAeC,KAAf","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from \"../lib/createRequestSaga\";\nimport * as postsAPI from \"../lib/api/posts\";\nimport { takeLatest } from \"redux-saga/effects\";\n\nconst [LIST_POSTS, LIST_POSTS_SUCCESS, LIST_POSTS_FAILURE] =\n  createRequestActionTypes(\"posts/LIST_POSTS\");\nconst [SEARCH_POSTS, SEARCH_POSTS_SUCCESS, SEARCH_POSTS_FAILURE] =\n  createRequestActionTypes(\"get/SEARCH_POSTS\");\n\nexport const listPosts = createAction(LIST_POSTS, ({ username, page }) => ({\n  username,\n  page,\n}));\n\nexport const searchPosts = createAction(\n  SEARCH_POSTS,\n  ({ page, option, content }) => ({ page, option, content })\n);\n\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\nconst searchPostsSaga = createRequestSaga(SEARCH_POSTS, postsAPI.searchPosts);\n\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n  yield takeLatest(SEARCH_POSTS, searchPostsSaga);\n}\n\nconst initialState = {\n  posts: null,\n  error: null,\n  lastPage: 1,\n};\n\nconst posts = handleActions(\n  {\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\n      ...state,\n      posts,\n      lastPage: parseInt(response.headers[\"last-page\"], 10), // 문자열을 숫자로 변환\n    }),\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [SEARCH_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\n      ...state,\n      posts,\n      lastPage: parseInt(response.headers[\"last-page\"], 10), // 문자열을 숫자로 변환\n    }),\n    [SEARCH_POSTS_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n  },\n  initialState\n);\n\nexport default posts;\n"]},"metadata":{},"sourceType":"module"}