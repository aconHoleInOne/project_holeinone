{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\n\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\n\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\n\nconst [UPDATE_POST, UPDATE_POST_SUCCESS, UPDATE_POST_FAILURE] = createRequestActionTypes('write/UPDATE_POST'); //포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({\n  key,\n  value\n}) => ({\n  key,\n  value\n}));\nexport const writePost = createAction(WRITE_POST, ({\n  title,\n  body\n}) => ({\n  title,\n  body\n}));\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\nexport const updatePost = createAction(UPDATE_POST, ({\n  id,\n  title,\n  body\n}) => ({\n  id,\n  title,\n  body\n})); // saga 생성\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  post: null,\n  postError: null\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  // initialState를 넣으면 초기상태로 바뀜\n  [CHANGE_FIELD]: (state, {\n    payload: {\n      key,\n      value\n    }\n  }) => ({ ...state,\n    [key]: value // 특정 key 값을 업데이트\n\n  }),\n  [WRITE_POST]: state => ({ ...state,\n    // post와 postError를 초기화\n    post: null,\n    postError: null\n  }),\n  // 포스트 작성 성공\n  [WRITE_POST_SUCCESS]: (state, {\n    payload: post\n  }) => ({ ...state,\n    post\n  }),\n  // 포스트 작성 실패\n  [WRITE_POST_FAILURE]: (state, {\n    payload: postError\n  }) => ({ ...state,\n    postError\n  }),\n  [SET_ORIGINAL_POST]: (state, {\n    payload: post\n  }) => ({ ...state,\n    title: post.title,\n    body: post.body,\n    originalPostId: post._id\n  }),\n  [UPDATE_POST_SUCCESS]: (state, {\n    payload: post\n  }) => ({ ...state,\n    post\n  }),\n  [UPDATE_POST_FAILURE]: (state, {\n    payload: postError\n  }) => ({ ...state,\n    postError\n  })\n}, initialState);\nexport default write;","map":{"version":3,"sources":["C:/Users/awd63/Downloads/AIhomeTraining_web-master/AIhomeTraining_web-master/Listener/frontend/src/modules/write.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","SET_ORIGINAL_POST","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","changeField","key","value","writePost","title","body","setOriginalPost","post","updatePost","id","writePostSaga","updatePostSaga","writeSaga","initialState","postError","write","state","payload","originalPostId","_id"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\nconst [\n  WRITE_POST,\n  WRITE_POST_SUCCESS,\n  WRITE_POST_FAILURE,\n] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\n\nconst [\n  UPDATE_POST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n] = createRequestActionTypes('write/UPDATE_POST');  //포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\nexport const writePost = createAction(WRITE_POST, ({ title, body }) => ({\n  title,\n  body\n}));\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\nexport const updatePost = createAction(\n  UPDATE_POST,\n  ({ id, title, body }) => ({\n    id,\n    title,\n    body,\n  }),\n);\n\n// saga 생성\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\n\nconst initialState = {\n  title: '',\n  body: '',\n  post: null,\n  postError: null,\n};\n\nconst write = handleActions(\n  {\n    [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value, // 특정 key 값을 업데이트\n    }),\n    [WRITE_POST]: state => ({\n      ...state,\n      // post와 postError를 초기화\n      post: null,\n      postError: null,\n    }),\n    // 포스트 작성 성공\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n    [SET_ORIGINAL_POST]: (state, {payload: post}) => ({\n       ...state,\n       title: post.title,\n       body: post.body,\n       originalPostId: post._id, \n    }),\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n  },\n  initialState,\n);\n\nexport default write;\n"]},"metadata":{},"sourceType":"module"}